import { __awaiter } from "tslib";
import { Observable, Subject } from "rxjs";
import { debounceTime, filter } from "rxjs/operators";
export var IntersectionStatus;
(function (IntersectionStatus) {
    IntersectionStatus["Visible"] = "Visible";
    IntersectionStatus["Pending"] = "Pending";
    IntersectionStatus["NotVisible"] = "NotVisible";
})(IntersectionStatus || (IntersectionStatus = {}));
export const fromIntersectionObserver = (element, config, debounce = 0) => new Observable(subscriber => {
    const subject$ = new Subject();
    const intersectionObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            subject$.next({ entry, observer });
        });
    }, config);
    subject$.subscribe(() => {
        subscriber.next(IntersectionStatus.Pending);
    });
    subject$.pipe(debounceTime(debounce), filter(Boolean))
        .subscribe(({ entry, observer }) => __awaiter(void 0, void 0, void 0, function* () {
        const isEntryVisible = yield isVisible(entry.target);
        if (isEntryVisible) {
            subscriber.next(IntersectionStatus.Visible);
        }
        else {
            subscriber.next(IntersectionStatus.NotVisible);
        }
    }));
    intersectionObserver.observe(element);
    return {
        unsubscribe() {
            intersectionObserver.disconnect();
            subject$.unsubscribe();
        }
    };
});
function isVisible(element) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(resolve => {
            const observer = new IntersectionObserver(([entry]) => {
                resolve(entry.isIntersecting);
                observer.disconnect();
            });
            observer.observe(element);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbS1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWFycXVlZS9zcmMvbGliL29ic2VydmFibGVzL2Zyb20taW50ZXJzZWN0aW9uLW9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRELE1BQU0sQ0FBTixJQUFZLGtCQUlYO0FBSkQsV0FBWSxrQkFBa0I7SUFDMUIseUNBQW1CLENBQUE7SUFDbkIseUNBQW1CLENBQUE7SUFDbkIsK0NBQXlCLENBQUE7QUFDN0IsQ0FBQyxFQUpXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFJN0I7QUFFRCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxDQUFFLE9BQW9CLEVBQUUsTUFBZ0MsRUFBRSxRQUFRLEdBQUcsQ0FBQyxFQUFHLEVBQUUsQ0FDL0csSUFBSSxVQUFVLENBQXNCLFVBQVUsQ0FBQyxFQUFFO0lBQzdDLE1BQU0sUUFBUSxHQUFHLElBQUksT0FBTyxFQUd4QixDQUFDO0lBRUwsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixDQUFFLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFO1FBQ3pFLE9BQU8sQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLEVBQUU7WUFDckIsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUNELE1BQU0sQ0FDUCxDQUFDO0lBRUYsUUFBUSxDQUFDLFNBQVMsQ0FBRSxHQUFHLEVBQUU7UUFDckIsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxJQUFJLENBQ1QsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQ2xCO1NBQ0EsU0FBUyxDQUFFLENBQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtRQUNyQyxNQUFNLGNBQWMsR0FBRyxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBcUIsQ0FBQyxDQUFDO1FBQ3BFLElBQUksY0FBYyxFQUNsQjtZQUNFLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0M7YUFFRDtZQUNFLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDaEQ7SUFDTCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXRDLE9BQU87UUFDSCxXQUFXO1lBQ1Asb0JBQW9CLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNCLENBQUM7S0FDSixDQUFDO0FBQ1YsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFlLFNBQVMsQ0FBRSxPQUFvQjs7UUFFMUMsT0FBTyxJQUFJLE9BQU8sQ0FBRSxPQUFPLENBQUMsRUFBRTtZQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUNsRCxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUM5QixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxDQUFDLENBQUM7WUFFSCxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZmlsdGVyIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcblxyXG5leHBvcnQgZW51bSBJbnRlcnNlY3Rpb25TdGF0dXMge1xyXG4gICAgVmlzaWJsZSA9ICdWaXNpYmxlJyxcclxuICAgIFBlbmRpbmcgPSAnUGVuZGluZycsXHJcbiAgICBOb3RWaXNpYmxlID0gJ05vdFZpc2libGUnXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmcm9tSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSAoIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb25maWc6IEludGVyc2VjdGlvbk9ic2VydmVySW5pdCwgZGVib3VuY2UgPSAwICkgPT4gXHJcbiAgICBuZXcgT2JzZXJ2YWJsZTxJbnRlcnNlY3Rpb25TdGF0dXM+KCBzdWJzY3JpYmVyID0+IHtcclxuICAgICAgICBjb25zdCBzdWJqZWN0JCA9IG5ldyBTdWJqZWN0PHtcclxuICAgICAgICAgICAgZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk7XHJcbiAgICAgICAgICAgIG9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcclxuICAgICAgICB9PigpO1xyXG5cclxuICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb25PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlciggKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCggZW50cnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdCQubmV4dCh7IGVudHJ5LCBvYnNlcnZlciB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY29uZmlnXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc3ViamVjdCQuc3Vic2NyaWJlKCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChJbnRlcnNlY3Rpb25TdGF0dXMuUGVuZGluZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICBzdWJqZWN0JC5waXBlKFxyXG4gICAgICAgICAgICBkZWJvdW5jZVRpbWUoZGVib3VuY2UpLFxyXG4gICAgICAgICAgICBmaWx0ZXIoQm9vbGVhbilcclxuICAgICAgICApXHJcbiAgICAgICAgLnN1YnNjcmliZSggYXN5bmMoeyBlbnRyeSwgb2JzZXJ2ZXIgfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpc0VudHJ5VmlzaWJsZSA9IGF3YWl0IGlzVmlzaWJsZShlbnRyeS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpZiAoaXNFbnRyeVZpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoSW50ZXJzZWN0aW9uU3RhdHVzLlZpc2libGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChJbnRlcnNlY3Rpb25TdGF0dXMuTm90VmlzaWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW50ZXJzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCkge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdCQudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbn0pO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gaXNWaXNpYmxlKCBlbGVtZW50OiBIVE1MRWxlbWVudCApXHJcbntcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKFtlbnRyeV0pID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShlbnRyeS5pc0ludGVyc2VjdGluZyk7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuICAgIH0pO1xyXG59Il19